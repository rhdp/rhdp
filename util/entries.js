module.exports = {
	"articles": [{
		"title": "ROM Hacking",
		"md": "ROM hacking is the process of modifying a video game ROM image to alter the game\'s graphics, dialogue, levels, gameplay, or other elements. This is usually done by technically inclined video game fans to breathe new life into a cherished old game, as a creative outlet, or to make essentially new unofficial games using the old game\'s engine.\r\n\r\nROM hacking is generally accomplished through use of a hex editor (a program for editing non-textual data) and various specialized tools such as tile editors, and game-specific tools which are generally used for editing levels, items, and the like, although more advanced tools such as assemblers and debuggers are occasionally used. Once ready, they are usually distributed on the Internet for others to play on an emulator.[1]\r\n\r\nFan translation (known as \"translation hacking\" within the ROM hacking community) is a type of ROM hacking; there are also anti-censorship hacks that exist to restore a game to its original state, which is often seen with older games that were imported, as publishers\' content policies for video games (most notably, Nintendo\'s) were much stricter in the United States than Japan or Europe. Although much of the methodology applies to both types of hacking, this article focuses on \"creative hacking\" such as editing game levels.\nMany ROM hackers form or join groups for various reasons, such as for web space to host hacks and\/or screenshots, for the support of or collaboration with other members of the group, for privileged status on the group\'s message board (if it has one), for the prestige associated with the group, or just for the comradeship. Many hackers, however, choose to go solo. Not all group members are necessarily ROM hackers themselves; some have \"retired\" from the craft, others offer services such as website and\/or message board administration, and some simply offer guidance to aspiring ROM hackers.\r\n\r\nMost hacking groups offer web space for hosting hacks and screenshots (sometimes only hosting hacks by the group\'s members, sometimes hosting almost any hack), a message board, and often have an IRC channel.\nHaving been created by many different programmers or programming teams, ROM data can be very diverse.\r\n\r\nHex editing[edit]\r\nA hex editor is one of the most fundamental tools in any ROM hacker\'s repertoire. Hex editors are usually used for editing text, and for editing other data for which the structure is known (for example, item properties), and Assembly hacking.\r\n\r\nEditing text is one of the most basic forms of hacking. Many games do not store their text in ASCII form, and because of this, some specialized hex editors have been developed, which can be told what byte values correspond to what letter(s) of the alphabet, to facilitate text editing; a file that defines these byte=letter relationships is called a \"table\" file. Other games use simple text compression techniques (such as byte pair encoding, also called dual-tile encoding or DTE, in which certain combinations of two or more letters are encoded as one byte) which a suitably equipped hex editor can facilitate editing.\r\n\r\nA hex editor is the tool of choice for editing things such as character\/item properties, if the structure and location of this data is known and there is no game-specific editor for the game that can edit this information. Some intrepid hackers also perform level editing with a hex editor, but this is extremely difficult (except on games whose level storage format closely resembles how it is presented in a hex editor).\r\n\r\nGraphics editing[edit]\r\nAnother basic hacking skill is graphics hacking, which is changing the appearance of the game\'s environs, characters, fonts, or other such things. The format of graphics data varies from console to console, but most of the early ones (NES, Super NES, Game Boy, etc.) store graphics in tiles, which are 8x8-pixel units of data, which are arranged on-screen to produce the desired result. Editing these tiles is also possible with a hex editor, but is generally accomplished with a tile editor (such as Tile Layer or Tile Molester), which can display the ROM data in a graphical way, as well as editing tiles.\r\n\r\nGraphics hacks can range from simple edits (such as giving Mario an afro) to \"porting\" characters from one game to another, to full-blown thematic changes (usually with accompanying palette changes; see below).\r\n\r\nMore sophisticated graphics hacking involves changing more than just tiles and colors, but also the way in which the tiles are arranged, or tile groups generated, giving more flexibility and control over the final appearance. This is accomplished through hex editing or a specialized tool (either for the specific game or a specific system). A good example of a graphics hack is the uncompleted Pok\u00E9mon Torzach, a hack which attempted to add a whole new generation of Pok\u00E9mon and tiles to the game. The hack has since been discontinued, but it still serves as a good example on what can be achieved with the tools available.\r\n\r\nPalette editing[edit]\r\nAnother common form of hacking is palette hacking, where color values are modified to change the colors a player sees in the game (this often goes hand-in-hand with graphics hacking); Palette values are commonly stored in Hex. This is fairly easy for NES games, the graphics of which use a pre-defined set of colors among which a game selects; palette hacking in this case entails changing which of those colors are selected. The matter is slightly more complicated with Super NES games and games for other systems, which store absolute RGB color values. Palette editors are usually simple and often are with Level editors, or Game specific graphics editors.\r\n\r\nLevel editing[edit]\r\nOne of the most popular forms of ROM hacking, level editing entails modifying or redesigning a game\'s levels or maps. This is almost exclusively done with an editor specially tailored for a particular game (called a level editor). Level edits can be done to make the game more challenging, to alter the flow of the game\'s plot, or just to give something new to an old game. Combined with extensive graphics hacking, the game can take on a very different look and feel.\r\n\r\nData editing[edit]\r\nA core component of many hacks (especially of role-playing video games) is editing data such as character, item, and enemy properties. This is usually done either \"by hand\" (with a hex editor) if the location and structure of the data is known, or with a game-specific editor that has this functionality. Through this, a hacker can alter how weapons work, how strong enemies are or how they act, etc. This can be done to make the game easier or harder, or to create new scenarios for the player to face.\r\n\r\nAssembly hacking[edit]\r\nThe most powerful, and arguably the most difficult, hacking technique is editing the game\'s actual code, a process called ASM hacking (\"ASM\" means \"assembly\", referring to the type of programming language used for early video games).[1] There is no set pattern for ASM hacking, as the code varies widely from game to game, but most skilled ASM hackers either use an emulator equipped with a built-in debugger or tracer, or run the ROM through a disassembler, then analyze the code and modify it using a hex editor or assembler according to their needs. While quite challenging compared to the relatively simple methods listed above, anything is possible with ASM hacking (of course, within the limits of the hardware\/software of the gaming platform), ranging from altering enemy AI to changing how graphics are generated. (Of course, the possibilities are still limited by the hacker\'s ability to comprehend and modify the existing code.)\r\n\r\nIf the developers used a typed language, the hacker may be able to compile their own code for the game in the same language if they have access to a proper compiler. One such example would be using C to hack Nintendo 64 games, since MIPS-GCC can compile code for the Nintendo 64.[2][3]\r\n\r\nMusic hacking[edit]\r\nMusic hacks are relatively rare, due to the wide variety of ways games store music data (hence the difficulty in locating and modifying this data) and the difficulties in composing new music (or porting music from another game). As music cracking is very uncommon, many hacks do not have any ported\/composed music added in. The program SapTapper can be used to hack Game Boy Advance music data, however, as many Game Boy Advance games use the M4A Engine (also called \"Sappy Driver\") for music. Various other utilities were created to work with the engine such as Sappy 2006. Another instance of the same engine being used between games is on the Nintendo 64, in which most games use the same format; although they use different sound banks, as expected. A utility known as the N64 Midi Tool was created to edit the sequences that the majority of Nintendo 64 games use, though it does not cover the first-party N64 titles that use a slightly different engine, such as Super Mario 64.\r\n\r\nROM expansion[edit]\r\nGenerally speaking, a ROM hacker cannot add content to a game, but merely change existing content. This limit can be overcome through ROM expansion, whereby the total size of the ROM image is increased, making room for more content and a larger game. The difficulty in doing this varies depending on the system for which the game was made. For example, expanding an NES ROM may be difficult or even impossible due to the mapper used by the game. For example, if a mapper allows 16 ROM banks and all of them are used, expanding the ROM further is impossible without somehow converting the game to another mapper, which could be easy or extremely difficult. On the other hand, expanding a Super NES game is (relatively) straightforward. To utilize the added space, parts of the game code have to be modified or re-written (see Assembly hacking above) so the game knows where to look. Another type of ROM expansion that is fairly easy is Game Boy Advance ROMs. The ROMs themselves are generally small, but the memory space available sometimes exceeds it by multiples of up to 17."
	}, {
		"title": "Hex Editors",
		"md": "A hex editor (or binary file editor or byte editor) is a type of computer program that allows for manipulation of the fundamental binary data that constitutes a computer file. The name \'hex\' comes from \'hexadecimal\': the standard numerical format for representing binary data. A typical computer file occupies multiple areas on the platter(s) of a disk drive, whose contents are combined to form the file. Hex editors that are designed to parse and edit sector data from the physical segments of floppy or hard disks are sometimes called sector editors or disk editors.\n\n[![Hex Editor](http://upload.wikimedia.org/wikipedia/commons/2/2c/Hexedit-screenshot.png)](#)\n\nSince the invention of computers and their different uses, a variety of file formats has been created. For some, it was convenient to be able to access the data as a series of raw digits. A program called SUPERZAP was available for IBM OS\/360 systems which could edit raw disk records and also understood the format of executable files.[1] Pairs of hexadecimal digits (each pair can represent a byte) are the current standard, because the vast majority of machines and file formats in use today handle data in units or groups of 8-bit bytes. Hexadecimal and also octal are common because these digits allow one to see which bits in a byte are set. Today, decimal instead of hexadecimal representation is becoming a popular second option due to the more familiar number base and additional helper tools, such as template systems and data inspectors, that reduce the benefits of the hexadecimal numerical format.\n\nSome hex editors offer a template system that can present the sequence of bytes of a binary file in a structured way, covering part or all of the desired file format. Usually the GUI for a template is a separate tool window next to the main hex editor. Some cheat engine systems consist only of such a template GUI.\r\n\r\nTypically, a template is represented as a list of labeled text boxes, such that individual values of a file can be easily edited in the appropriate format (e.g., as string, color, or decimal number). Without template support, it is necessary to find the right offset in a file where the value that is to be changed is stored. Also, raw hex editing may require conversion from hexadecimal to decimal, catering for byte order, or other data type conversion peculiarities.\r\n\r\nTemplates can be stored as files, thereby exchanged by users, and are often shared publicly over the manufacturer\'s website. Most if not all hex editors define their own template file format; there is no trend to support a standard or even compatibility between the various formats out in the wild.\n\nAdvanced hex editors have scripting systems that let the user create macro like functionality as a sequence of user interface commands for automating common tasks. This can be used for providing scripts that automatically patch files (e.g., game cheating, modding, or product fixes provided by community) or to write more complex\/intelligent templates.\r\n\r\nScripting languages vary widely, often being product specific languages resembling MS-DOS batch files, to systems that support fully-fledged scripting languages such as Lua or Python.\nA few select editors have a plugin system that allows to extend the GUI and add new functionality, usually loading dynamic link libraries written in a C-compatible language."
	}, {
		"title": "Pokémon",
		"md": "Pok\u00E9mon (\u30DD\u30B1\u30E2\u30F3 Pokemon?, \/\u02C8po\u028Ake\u026Am\u0252n\/ poh-kay-mon[1][2]) is a media franchise published by Japanese video game company Nintendo, owned by The Pok\u00E9mon Company,[3] and created by Satoshi Tajiri in 1996, focused on the titular creatures. Originally released as a pair of interlinkable Game Boy role-playing video games developed by Game Freak, Pok\u00E9mon has since become the second-most successful and lucrative video game-based media franchise in the world, behind only Nintendo\'s Mario franchise.[4] Pok\u00E9mon properties have since been merchandised into anime, manga, trading cards, toys, books, and other media.\r\n\r\nThe franchise celebrated its tenth anniversary in 2006.[5] Cumulative sales of the video games (including home console versions, such as \"Hey You, Pikachu!\" for the Nintendo 64) have reached more than 200 million copies.[6] In November 2005, 4Kids Entertainment, which had managed the non-game related licensing of Pok\u00E9mon, announced that it had agreed not to renew the Pok\u00E9mon representation agreement. Pok\u00E9mon USA Inc. (now The Pok\u00E9mon Company International), a subsidiary of Japan\'s Pok\u00E9mon Co., now oversees all Pok\u00E9mon licensing outside of Asia.[7]\n\n[![Pokemon](http://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/English_Pok%C3%A9mon_logo.svg/269px-English_Pok%C3%A9mon_logo.svg.png)](#)\n\n## Name\nThe name Pok\u00E9mon is the romanized contraction of the Japanese brand Pocket Monsters (\u30DD\u30B1\u30C3\u30C8\u30E2\u30F3\u30B9\u30BF\u30FC Poketto Monsut\u0101?).[8] The term Pok\u00E9mon, in addition to referring to the Pok\u00E9mon franchise itself, also collectively refers to the 719 known fictional species that have made appearances in Pok\u00E9mon media as of the release of the sixth generation titles Pok\u00E9mon X and Y. \"Pok\u00E9mon\" is identical in both the singular and plural, as is each individual species name; it is grammatically correct to say \"one Pok\u00E9mon\" and \"many Pok\u00E9mon\", as well as \"one Pikachu\" and \"many Pikachu\".[9] (However, Pok\u00E9mon Red, Blue, and Yellow feature NPCs referring to the plurals of Clefairy and Diglett with an \"s\" at the end, shown \"CLEFAIRYs\" and \"DIGLETTs\", respectively. This was fixed in FireRed and LeafGreen.)\n## Concept\nThe concept of the Pok\u00E9mon universe, in both the video games and the general fictional world of Pok\u00E9mon, stems from the hobby of insect collecting, a popular pastime which Pok\u00E9mon executive director Satoshi Tajiri enjoyed as a child.[10] Players of the games are designated as Pok\u00E9mon Trainers, and the two general goals (in most Pok\u00E9mon games) for such Trainers are: to complete the Pok\u00E9dex by collecting all of the available Pok\u00E9mon species found in the fictional region where that game takes place; and to train a team of powerful Pok\u00E9mon from those they have caught to compete against teams owned by other Trainers, and eventually become the strongest Trainer: the Pok\u00E9mon Master. These themes of collecting, training, and battling are present in almost every version of the Pok\u00E9mon franchise, including the video games, the anime and manga series, and the Pok\u00E9mon Trading Card Game.\r\n\r\nIn most incarnations of the fictional Pok\u00E9mon universe, a Trainer that encounters a wild Pok\u00E9mon is able to capture that Pok\u00E9mon by throwing a specially designed, mass-producible spherical tool called a Pok\u00E9 Ball at it. If the Pok\u00E9mon is unable to escape the confines of the Pok\u00E9 Ball, it is officially considered to be under the ownership of that Trainer. Afterwards, it will obey whatever its new master commands, unless the Trainer demonstrates such a lack of experience that the Pok\u00E9mon would rather act on its own accord. Trainers can send out any of their Pok\u00E9mon to wage non-lethal battles against other Pok\u00E9mon; if the opposing Pok\u00E9mon is wild, the Trainer can capture that Pok\u00E9mon with a Pok\u00E9 Ball, increasing his or her collection of creatures. Pok\u00E9mon already owned by other Trainers cannot be captured, except under special circumstances in certain games. If a Pok\u00E9mon fully defeats an opponent in battle so that the opponent is knocked out (i.e., \"faints\"), the winning Pok\u00E9mon gains experience points and may level up. When leveling up, the Pok\u00E9mon\'s statistics (\"stats\") of battling aptitude increase, such as Attack and Speed. From time to time the Pok\u00E9mon may also learn new moves, which are techniques used in battle. In addition, many species of Pok\u00E9mon possess the ability to undergo a form of metamorphosis and transform into a similar but stronger species of Pok\u00E9mon, a process called evolution.\r\n\r\nIn the main series, each game\'s single-player mode requires the Trainer to raise a team of Pok\u00E9mon to defeat many non-player character (NPC) Trainers and their Pok\u00E9mon. Each game lays out a somewhat linear path through a specific region of the Pok\u00E9mon world for the Trainer to journey through, completing events and battling opponents along the way. Each game features eight especially powerful Trainers, referred to as Gym Leaders, that the Trainer must defeat in order to progress. As a reward, the Trainer receives a Gym Badge, and once all eight badges are collected, that Trainer is eligible to challenge the region\'s Pok\u00E9mon League, where four immensely talented trainers (referred to collectively as the \"Elite Four\") challenge the Trainer to four Pok\u00E9mon battles in succession. If the trainer can overcome this gauntlet, he or she must then challenge the Regional Champion, the master Trainer who had previously defeated the Elite Four. Any Trainer who wins this last battle becomes the new champion."
	}, {
		"title": "Game Boy Advance",
		"md": "The Game Boy Advance (\u30B2\u30FC\u30E0\u30DC\u30FC\u30A4\u30A2\u30C9\u30D0\u30F3\u30B9 G\u0113mu B\u014Di Adobansu?), often shortened to GBA, is a 32-bit handheld video game console developed, manufactured and marketed by Nintendo. It is the successor to the Game Boy Color. It was released in Japan on March 21, 2001; in North America on June 11, 2001; in Australia and Europe on June 22, 2001; and in the People\'s Republic of China on June 8, 2004 (excluding Hong Kong).\r\n\r\nNintendo\'s competitors in the handheld market were the Neo Geo Pocket Color, WonderSwan, GP32, Tapwave Zodiac, and the N-Gage. Despite the competitors\' best efforts, Nintendo maintained its majority market share with the Game Boy Advance.\r\n\r\n\tWikimedia Commons has media related to Game Boy Advance.\r\nAs of June 30, 2010, the Game Boy Advance series has sold 81.51 million units worldwide.[4] Its successor, the Nintendo DS, was released in November 2004.\n\n[![Game Boy Advance](http://upload.wikimedia.org/wikipedia/commons/thumb/7/70/Game-Boy-Advance-Blk.jpg/250px-Game-Boy-Advance-Blk.jpg)](#)\n\n## History\n### Project Atlantis\nIn 1996, magazines including Electronic Gaming Monthly,[7] issues 53 and 54 of Total![citation needed] and the July 1996 issue of Game Informer[citation needed] featured reports of a new Game Boy, codenamed Project Atlantis. Although the expected release date of \"early 1997\" would make that machine seem to be the Game Boy Color, it was described as having a 32-bit RISC processor, a 3-by-2-inch color LCD screen, and a link port[7]\u2014a description that more closely matches the Game Boy Advance. It also may have referred to the unnamed, unreleased Game Boy Color successor prototype that was revealed at 2009\'s Game Developers Conference.[8] It was announced that Nintendo of Japan was working on a game for the system called \"Mario\'s Castle\".[7]\n## Technical Specifications\nThe technical specifications of the original Game Boy Advance are, as provided by Nintendo:[9]\r\n\r\nLength:\tapproximately 14.45 cm (5.69 in).\r\nWidth:\tapproximately 2.45 cm (0.96 in).\r\nHeight:\tapproximately 8.2 cm (3.2 in).\r\nMass:\tapproximately 140 g (4.9 oz).\r\nScreen:\t2.9 inches reflective thin-film transistor (TFT) color LCD.\r\nPower:\t2 AA batteries.\r\nBattery life:\tapproximately 15 hours on average while playing Game Boy Advance games (also dependent on the Game Pak being played, volume setting and any external peripherals being used - e.g. a screen light[10])\r\nCPU:\t16.8 MHz 32-bit ARM7TDMI with embedded memory. 8 or 4 MHz 8-bit Z80 coprocessor for Game Boy backward compatibility.\r\nMemory:\t32 kilobyte + 96 kilobyte VRAM (internal to the CPU), 256 kilobyte DRAM (outside the CPU).\r\nResolution:\t240 \u00D7 160 pixels (3:2 aspect ratio).\r\nColor support:\t15-bit BGR (5 bits depth per channel), capable of displaying 512 simultaneous colors in \"character mode\" and 32,768 (215) simultaneous colors in \"bitmap mode\".\r\nSound:\tDual 8-bit DAC for stereo sound (called Direct Sound), plus all legacy channels from Game Boy. The new DACs can be used to play back streams of wave data, or can be used to output multiple wave samples processed\/mixed in software by the CPU.\r\nBackward compatibility for Game Boy and Game Boy Color games is provided by an 4\/8 MHz Z80 coprocessor (Game Boy Advance software can use the audio tone generators to supplement the primary sound system), while a link port at the top of the unit allows it to be connected to other devices via use of a Nintendo Game Link cable or GameCube link cable. When playing Game Boy or Game Boy Color games on the Game Boy Advance, the L and R buttons can be used to toggle between a stretched widescreen format (240\u00D7144) and the original screen ratio of the Game Boy (160\u00D7144). Game Boy games can be played using the same selectable color palettes as on the Game Boy Color. Every Nintendo handheld system following the release of the Game Boy Advance SP has included a built-in light and rechargeable battery."
	}, {
		"title": "Ruby and Sapphire",
		"md": "Pokémon Ruby Version and Sapphire Version (ポケットモンスター ルビー&サファイア Poketto Monsutā Rubī & Safaia?, \"Pocket Monsters: Ruby & Sapphire\") are the third installments of the Pokémon series of role-playing video games, developed by Game Freak and published by Nintendo for the Game Boy Advance. The games were first released in Japan in late 2002 and internationally in 2003. Pokémon Emerald, a special edition version, was released two years later in each region. These three games (Pokémon Ruby, Sapphire, and Emerald) are part of the third generation of the Pokémon video game series, also known as the \"advanced generation\". A remake of the two games, titled Omega Ruby and Alpha Sapphire, will be released for the Nintendo 3DS in November 2014.\n\n[![Pokemon Ruby Cover](http://upload.wikimedia.org/wikipedia/en/thumb/6/6a/Pokemon_Ruby_NA.jpg/220px-Pokemon_Ruby_NA.jpg)](#)\n\nThe player starts their journey in Littleroot Town, where the family has just moved in from the Johto region after the player\'s father, Norman, became the leader of the Petalburg Gym. The story starts off with the player riding in the moving van, which arrives in Littleroot. After exiting the van, the player\'s mother explains that they have just arrived at their new home; they then enter the house together, and there are Machoke movers carrying boxes. The player\'s mother suggests that the player introduce themselves to Professor Birch, a friend of Norman\'s.\r\nUpon arriving at Birch\'s house, his wife greets the player, and upstairs the player meets their pseudo-rival (the alternate-gender player character of the player), the child of Professor Birch; after the introduction, he\/she soon leaves to join Birch, who is out in the field. The player then finds Birch on Route 101, where he is being chased by a Poochyena. Birch asks the player to take a Pok\u00E9 Ball out of his bag, which is lying on the ground; the player then chooses between Treecko, Torchic, and Mudkip as their starter Pok\u00E9mon. After choosing, a battle immediately begins with the wild Poochyena. After rescuing Birch, he lets the player keep the chosen Pok\u00E9mon as thanks for saving him. He then tells the player to meet up with his kid on Route 103 for pointers on how to be a Trainer.\r\nOnce the player finds their pseudo-rival on Route 103, they have their first battle, after which they return to Birch\'s lab, where the player receives a Pok\u00E9dex and some Pok\u00E9 Balls. Outside of the lab, the player\'s mother gives them the Running Shoes. Once the player arrives in Petalburg City, they meet with their father at the Gym, where he tells them that he is happy to learn that they have become a Trainer like him. During the conversation, a local boy named Wally enters the Gym and asks Norman to help him catch a Pok\u00E9mon. Norman loans Wally a Zigzagoon and a Pok\u00E9 Ball. He then asks the player to go along and help Wally with his task. On Route 102, Wally catches a Ralts, and the Trainers then return to the Gym, where Wally gives his thanks before being called home by his mother. Norman then encourages the player to travel Hoenn and challenge the nine Gym Leaders: Roxanne, Brawly, Wattson, Flannery, Norman, Winona, Tate and Liza, and Wallace.\r\nThe player then travels through Route 104 and Petalburg Woods; just before the exit from the woods, the player encounters the nefarious Team MagmaR or Team AquaS. After battling, the grunt reveals that their team is after something in Rustboro City.\r\nAt the Rustboro Gym, the player battles Roxanne and earns the Stone Badge; afterwards, the player runs into the Devon Researcher from Petalburg Woods. He tells the player that he has been robbed by Team MagmaR\/Team AquaS and that the player must get the Devon Goods back from the evil team. The player then heads out onto Route 116 and discovers an old man named Mr. Briney who tells them that the villainous team has also taken his Wingull Peeko hostage and gone into the Rusturf Tunnel. The player confronts the grunt inside the tunnel and retrieves the Devon Goods, as well as rescuing Peeko.\r\nOnce the Devon Goods are returned, the researcher asks the player to deliver them to the shipyard in Slateport City. The player then meets Mr. Stone, the president of the Devon Corporation, who asks that the player stop by Dewford Town and deliver a letter to his son Steven; as thanks for the player\'s earlier work, Mr. Stone gives the player a Pok\u00E9Nav. The player heads back through the Petalburg Woods to Mr. Briney\'s house, where he gives the player a ride down Route 105 to Dewford Town. Just north of Dewford on Route 106 is the Granite Cave where Steven is exploring. The player obtains HM05 (Flash) at the entrance, but it will not work without the Dewford Gym\'s Badge. After earning the Knuckle Badge from Brawly, the player can now use Flash to find Steven in the Granite Cave and deliver the letter. Steven rewards the player with TM47 (Steel Wing) and tells the player that he\/she could potentially become the Pok\u00E9mon League Champion.\r\nAfter leaving Dewford Town, Mr. Briney takes the player across Route 107 and Route 108 to Route 109, just south of Slateport City. When the player arrives in Slateport, there is a noticeable crowd of Team MagmaR\/Team AquaS grunts blocking the entrance to the Oceanic Museum. When the player tries to drop off the Devon Goods at Stern\'s Shipyard, they learn that Captain Stern is in the Oceanic Museum. Once the player finds Captain Stern, they are confronted by two villainous grunts, and after defeating them, the villainous team\'s leader MaxieR\/ArchieS appears and tells the player of their plans before warning not to get in the way again.\r\nAfter giving the Devon Goods to Captain Stern, the player leaves Slateport City and travels Route 110; after encountering and battling the pseudo-rival, the player arrives in Mauville City. Outside of the Mauville Gym, the player finds Wally and his uncle; Wally challenges the player to a battle to prove to his uncle that he is ready for the Gym. After the battle, Wally\'s uncle invites the player to visit Verdanturf Town sometime. Once the Dynamo Badge has been earned from Wattson, the player heads to Verdanturf Town and uses Rock Smash to clear the previously blocked Rusturf Tunnel, earning HM04 (Strength) as a reward. Next, the player returns to Mauville and travels through Route 111 and Route 112 to the Fiery Path, on the other side of which the player continues through Route 113 to Fallarbor Town.\r\nInside the Fallarbor Pok\u00E9mon Center, the player meets Lanette, who invites them to her house on Route 114. At the end of Route 114 is Meteor Falls, inside which the player finds Team MagmaR\/Team AquaS. This time, they have stolen a valuable Meteorite from Professor Cozmo. Suddenly, the scene is interrupted by the appearance of the opposite-version\'s team, which causes the thieves to retreat to Mt. Chimney with the stolen meteorite. At the top of Mt. Chimney, Team Magma and Team Aqua can be found fighting over the meteorite; after fighting an admin of the primary evil team (Tabitha in Ruby, Matt in Sapphire), the player finds the leader of the team using the meteorite in a strange machine. The leader then battles the player.\r\nTaking the southern path that was blocked by the battling teams, the player exits Mt. Chimney and reaches Lavaridge Town, home of the Lavaridge Gym. After receiving the Heat Badge from Flannery, the player is given the Go-Goggles by their pseudo-rival, who then suggests that the player challenge their father at the Petalburg Gym. After getting the Balance Badge from Norman, the player visits Wally\'s father, who gives the player HM03 (Surf).\r\nAs the player then travels through Route 118 (just east of Mauville City), they encounter Steven once again. Afterwards, the player continues through Route 119, reaching the Weather Institute, which is being attacked by the evil team in search of the weather Pok\u00E9mon that the institute has created. After battling the grunts and facing off with an admin (Courtney in Ruby, Shelly in Sapphire), the player saves the institute and is given the Pok\u00E9mon Castform as a reward. Shortly after leaving the Institute, the pseudo-rival appears and battles the player, and they give away HM02 (Fly) upon defeat.\r\nThe player arrives in Fortree City but cannot challenge the Gym because something invisible is blocking the entrance. On Route 120, the player once again meets Steven, and he gives the player the Devon Scope, which allows them to enter the Gym by revealing the invisible thing to be the Pok\u00E9mon Kecleon. After the player defeats Winona and receives the Feather Badge, the quest continues through Route 120 and Route 121 to Lilycove City. On Route 121, there are some grunts from the evil team discussing their plan to go to Mt. Pyre, and upon arriving in Lilycove, the player finds it crawling with more grunts. Outside of the Lilycove Department Store, the player battles his\/her pseudo-rival again.\r\nAfter the battle, the player heads to Mt. Pyre to drive off the evil team. At the summit of Mt. Pyre, the player finds the leader of the team, who has taken the Blue OrbR\/Red OrbS and proclaims that the young Trainer has arrived too late to stop him; the team then heads for Slateport City. The old couple that watch over the orbs beseech the player to stop the evil team, and they give the player the stolen orb\'s counterpart. Upon returning to Slateport, the player finds that Capt. Stern has discovered an undersea cavern on Route 128. The evil team then suddenly appears and takes over the captain\'s research submarine. The leader of the evil team once again taunts the player, and he mentions that the team\'s hideout is in Lilycove City. Once the player fights their way through to the center of the hideout, finding the Master Ball along the way, they encounter an admin (Tabitha in Ruby, Courtney in Sapphire) who battles the player to stall until the leader takes off in the submarine.\r\nThe player must then travel Route 124 to Mossdeep City. Steven\'s house is at the northwestern edge of the city, and here the player receives HM08 (Dive). Next, the player challenges Tate and Liza of the Mossdeep Gym to earn the Mind Badge. Heading to Route 128 and using Dive, the player finds the Seafloor Cavern, where the evil team has gone. In the deepest reaches of the cavern, the player has a showdown with the team leader, who then uses the Orb to awaken the sleeping GroudonR\/KyogreS there. After being awakened, the ancient Pok\u00E9mon vanishes, and the weather all over Hoenn goes out of control. The leader realizes that he can\'t control the Pok\u00E9mon\'s power at all; just then, the leader of the opposite team appears, and the two bosses team up to try to stop the rampage.\r\nAfter the bosses leave, Steven appears and tells the player to head to Sootopolis City, to which Groudon\/Kyogre has gone. Heading to Route 126 and using Dive again, the player finds the entrance to Sootopolis City. Inside the city, the player finds Steven, who introduces them to his friend Wallace, the Sootopolis Gym Leader, who is also entrusted with the duty of protecting the Cave of Origin. Upon seeing the Orb that the player possesses, Wallace grants them entrance to the cave, where the rampaging ancient Pok\u00E9mon is waiting. After capturing or defeating the Pok\u00E9mon, the weather returns to normal, and the world is saved.\r\nSteven is then found waiting outside of the Sootopolis Gym to thank the player on his and Wallace\'s behalf before the player faces the final Gym challenge. Afterwards, with the Rain Badge in tow, the player now has all eight Badges, and they head down Route 128 to Ever Grande City, where Victory Road and the final challenge await. Wally battles the player one last time before they exit the cavern.\r\nThe Elite Four are the strongest Trainers in the region, and they can only be battled by challengers that have proven themselves by collecting the eight Badges of Hoenn. They are Sidney, who specializes in Dark-type Pok\u00E9mon; Phoebe, who specializes in Ghost-type Pok\u00E9mon; Glacia, who specializes in Ice-type Pok\u00E9mon; and Drake, who specializes in Dragon-type Pok\u00E9mon. After defeating the Elite Four, the player must then battle the Pok\u00E9mon League Champion, Steven.\r\nAfter the battle, Professor Birch and the pseudo-rival arrive to congratulate the player. Birch examines the player\'s Pok\u00E9dex, the player is registered in the Hall of Fame, and the credits roll.\r\nAfter the credits, the player is returned to Littleroot Town. Downstairs, Norman gives the player the S.S. Ticket to take the S.S. Tidal over to the Battle Tower. The player also now has the ability to encounter Rayquaza at the Sky Pillar and find LatiosR\/LatiasS roaming around Hoenn."
	}, {
		"title": "ARM",
		"md": "[![ARM](http://upload.wikimedia.org/wikipedia/commons/thumb/6/60/ARM_logo.svg/200px-ARM_logo.svg.png)](#!)\n\nARM is a family of instruction set architectures for computer processors based on a reduced instruction set computing (RISC) architecture developed by British company ARM Holdings. A RISC-based computer design approach means ARM processors require significantly fewer transistors than typical CISC x86 processors in most personal computers. This approach reduces costs, heat and power use. Such reductions are desirable traits for light, portable, battery-powered devices—​including smartphones, laptops, tablet and notepad computers, and other embedded systems. A simpler design facilitates more efficient multi-core CPUs and higher core counts at lower cost, providing improved energy efficiency for servers. ARM Holdings develops the instruction set and architecture for ARM-based products, but does not manufacture products. The company periodically releases updates to its cores. Current cores from ARM Holdings support a 32-bit address space and 32-bit arithmetic; the ARMv8-A architecture, announced in October 2011, adds support for a 64-bit address space and 64-bit arithmetic. Instructions for ARM Holdings\' cores have 32 bits wide fixed-length instructions, but later versions of the architecture also support a variable-length instruction set that provides both 32 and 16 bits wide instructions for improved code density. Some cores can also provide hardware execution of Java bytecodes. ARM Holdings licenses the chip designs and the ARM instruction set architectures to third parties, who design their own products that implement one of those architectures—​including systems-on-chips (SoC) that incorporate memory, interfaces, radios, etc. Currently, the widely used Cortex cores, older \"		classic \" cores, and specialized SecurCore cores variants are available for each of these to include or exclude optional capabilities. Companies that make chips that implement an ARM architecture include Apple, AppliedMicro, Atmel, Broadcom, Freescale Semiconductor, Nvidia, NXP, Qualcomm, Samsung Electronics, ST Microelectronics and Texas Instruments. Qualcomm introduces new three-layer 3D chip stacking in their 2014-15 ARM SoCs such as in their first 20 nm 64-bit octa-core. Globally ARM is the most widely used instruction set architecture in terms of quantity produced. The low power consumption of ARM processors has made them very popular: over 50 billion ARM processors have been produced as of 2014, thereof 10 billion in 2013 and \"		ARM - basedchipsarefoundinnearly60percentoftheworld’ smobiledevices \". In 2008, 10 billion chips had been produced. The ARM architecture (32-bit) is the most widely used architecture in mobile devices, and most popular 32-bit one in embedded systems. In 2005, about 98% of all mobile phones sold used at least one ARM processor. According to ARM Holdings, in 2010 alone, producers of chips based on ARM architectures reported shipments of 6.1 billion ARM-based processors, representing 95% of smartphones, 35% of digital televisions and set-top boxes and 10% of mobile computers.\n\n[![System](http://upload.wikimedia.org/wikipedia/commons/thumb/8/85/ARMSoCBlockDiagram.svg/300px-ARMSoCBlockDiagram.svg.png)](#!)\n\nThe British computer manufacturer Acorn Computers first developed ARM in the 1980s to use in its personal computers. Its first ARM-based products were coprocessor modules for the BBC Micro series of computers. After the successful BBC Micro computer, Acorn Computers considered how to move on from the relatively simple MOS Technology 6502 processor to address business markets like the one that was soon dominated by the IBM PC, launched in 1981. The Acorn Business Computer (ABC) plan required that a number of second processors be made to work with the BBC Micro platform, but processors such as the Motorola 68000 and National Semiconductor 32016 were considered unsuitable, and the 6502 was not powerful enough for a graphics based user interface. After testing all available processors and finding them lacking, Acorn decided it needed a new architecture. Inspired by white papers on the Berkeley RISC project, Acorn considered designing its own processor. A visit to the Western Design Center in Phoenix, where the 6502 was being updated by what was effectively a single-person company, showed Acorn engineers Steve Furber and Sophie Wilson they did not need massive resources and state-of-the-art research and development facilities. Wilson developed the instruction set, writing a simulation of the processor in BBC BASIC that ran on a BBC Micro with a second 6502 processor. This convinced Acorn engineers they were on the right track. Wilson approached Acorn\'s CEO, Hermann Hauser, and requested more resources. Once he had approval, he assembled a small team to implement Wilson\'s model in hardware. he official Acorn RISC Machine project started in October 1983. They chose VLSI Technology as the silicon partner, as they were a source of ROMs and custom chips for Acorn. Wilson and Furber led the design. They implemented it with a similar efficiency ethos as the 6502. A key design goal was achieving low-latency input\/output (interrupt) handling like the 6502. The 6502\'s memory access architecture had let developers produce fast machines without costly direct memory access hardware.\r\n\r\nVLSI produced the first ARM silicon on 26 April 1985. It worked the first time, and was known as ARM1 by April 1985. The first production systems named ARM2 were available the following year.\r\n\r\nThe first ARM application was as a second processor for the BBC Micro, where it helped in developing simulation software to finish development of the support chips (VIDC, IOC, MEMC), and sped up the CAD software used in ARM2 development. Wilson subsequently rewrote BBC BASIC in ARM assembly language. The in-depth knowledge gained from designing the instruction set enabled the code to be very dense, making ARM BBC BASIC an extremely good test for any ARM emulator. The original aim of a principally ARM-based computer was achieved in 1987 with the release of the Acorn Archimedes. In 1992, Acorn once more won the Queen\'s Award for Technology for the ARM.\r\n\r\nThe ARM2 featured a 32-bit data bus, 26-bit address space and 27 32-bit registers. Eight bits from the program counter register were available for other purposes; the top six bits (available because of the 26-bit address space), served as status flags, and the bottom two bits (available because the program counter was always word-aligned), were used for setting modes. The address bus was extended to 32 bits in the ARM6, but program code still had to lie within the first 64 MB of memory in 26-bit compatibility mode, due to the reserved bits for the status flags. The ARM2 had a transistor count of just 30,000, compared to Motorola\'s six-year-older 68000 model with around 40,000. Much of this simplicity came from the lack of microcode (which represents about one-quarter to one-third of the 68000) and from (like most CPUs of the day) not including any cache. This simplicity enabled low power consumption, yet better performance than the Intel 80286. A successor, ARM3, was produced with a 4 KB cache, which further improved performance. In the late 1980s Apple Computer and VLSI Technology started working with Acorn on newer versions of the ARM core. In 1990, Acorn spun off the design team into a new company named Acorn RISC Machines Ltd., which became ARM Ltd when its parent company, ARM Holdings plc, floated on the London Stock Exchange and NASDAQ in 1998.[25]\r\n\r\nThe new Apple-ARM work would eventually evolve into the ARM6, first released in early 1992. Apple used the ARM6-based ARM610 as the basis for their Apple Newton PDA. In 1994, Acorn used the ARM610 as the main central processing unit (CPU) in their RiscPC computers. DEC licensed the ARM6 architecture and produced the StrongARM. At 233 MHz, this CPU drew only one watt (newer versions draw far less). This work was later passed to Intel as a part of a lawsuit settlement, and Intel took the opportunity to supplement their i960 line with the StrongARM. Intel later developed its own high performance implementation named XScale, which it has since sold to Marvell. Transistor count of the ARM core remained essentially the same size throughout these changes; ARM2 had 30,000 transistors, while ARM6 grew only to 35,000."
	}]
};
